syntax = "proto3";

package geofence;
option go_package = ".;geofence";

service GeofenceService {
  rpc GetGeofencesByUserId(UserPoints) returns (Geofences) {}
  rpc CheckGeofenceByPoint(PointWithGeofence) returns (Geofences) {}
  rpc GetDistanceToGeofence(Points) returns (Geofences) {}
}

// requests
message Point {
  uint64 point_id = 1;  // уникальный id  точки
  double latitude = 2;  // широта
  double longitude = 3; // долгота
  double accuracy = 4;  // точность
}

message UserPoints {
  uint64 user_id = 1;        // id пользователя
  bool with_distance = 2;    // считать дистанцию
  repeated Point items = 3;  // список точек
}
message Points {
   repeated Point points = 1;  // список точек
}

message  PointWithGeofence {
  repeated Point points = 1;       // список геоточек
  repeated uint64 geofence_id = 2; // список геозон
}

// responses
message  GeofenceInfo {
  uint64 geofence_id = 1; // id геозоны
  uint64 polygon_id = 2;  // id полигона
  string title = 3;       // название геозоны
  double distance = 4;    // минимальное расстояние до границы полигона
}

message Geofence{
  uint64 point_id = 1;                // id точки
  repeated GeofenceInfo geoInfo = 2;  // информация, о геозоне
}

message Geofences{
  uint64 user_id = 1;              // user_id для которого был запрос
  repeated Geofence geofence = 2;  // информацио о геозонах
  Status status = 3;               // статус ответа
  string error = 4;                // текст ошибки
}

enum Status {
  OK = 0;
  NOT_FOUND = 1;
  BAD_REQUEST = 2;
  INTERNAL_SERVER_ERROR = 3;
}
